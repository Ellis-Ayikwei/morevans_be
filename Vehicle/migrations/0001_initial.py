# Generated by Django 5.1.5 on 2025-05-10 23:53

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('Driver', '0001_initial'),
        ('Provider', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('registration', models.CharField(help_text='UK Vehicle Registration Number (e.g., AB12 CDE)', max_length=10, unique=True, validators=[django.core.validators.RegexValidator('^[A-Z0-9 ]{1,10}$', 'Valid UK vehicle registration required')])),
                ('vin', models.CharField(help_text='Vehicle Identification Number (17 characters)', max_length=17, unique=True, validators=[django.core.validators.RegexValidator('^[A-HJ-NPR-Z0-9]{17}$', 'Valid VIN required')], verbose_name='VIN Number')),
                ('make', models.CharField(help_text='Vehicle manufacturer', max_length=50)),
                ('model', models.CharField(help_text='Vehicle model', max_length=100)),
                ('year', models.PositiveIntegerField(help_text='Year of manufacture', validators=[django.core.validators.MinValueValidator(1980), django.core.validators.MaxValueValidator(2030)])),
                ('vehicle_type', models.CharField(choices=[('small_van', 'Small Van (up to 2.5t)'), ('medium_van', 'Medium Van (2.5-3.5t)'), ('large_van', 'Large Van (3.5t)'), ('luton', 'Luton Van'), ('7.5t', '7.5 Tonne Truck'), ('18t', '18 Tonne Truck'), ('refrigerated', 'Refrigerated Vehicle'), ('flatbed', 'Flatbed Truck'), ('tipper', 'Tipper Truck'), ('curtain_sider', 'Curtain Sider'), ('dropside', 'Dropside Truck'), ('tail_lift', 'Tail Lift Van'), ('pickup', 'Pickup Truck'), ('cargo_bike', 'Cargo Bike'), ('other', 'Other Specialized Vehicle')], max_length=20)),
                ('fuel_type', models.CharField(choices=[('diesel', 'Diesel'), ('petrol', 'Petrol'), ('electric', 'Electric'), ('hybrid', 'Hybrid'), ('plugin_hybrid', 'Plug-in Hybrid'), ('hydrogen', 'Hydrogen'), ('lpg', 'LPG'), ('cng', 'CNG')], max_length=15)),
                ('transmission', models.CharField(choices=[('manual', 'Manual'), ('automatic', 'Automatic')], default='manual', max_length=10)),
                ('color', models.CharField(blank=True, max_length=50)),
                ('payload_capacity_kg', models.PositiveIntegerField(help_text='Maximum payload in kg')),
                ('gross_vehicle_weight_kg', models.PositiveIntegerField(help_text='Gross vehicle weight in kg (GVW)')),
                ('load_length_mm', models.PositiveIntegerField(help_text='Load length in mm')),
                ('load_width_mm', models.PositiveIntegerField(help_text='Load width in mm')),
                ('load_height_mm', models.PositiveIntegerField(help_text='Load height in mm')),
                ('load_volume_m3', models.DecimalField(decimal_places=2, help_text='Load volume in cubic meters', max_digits=5)),
                ('mot_expiry_date', models.DateField(help_text='MOT test certificate expiry date')),
                ('road_tax_expiry_date', models.DateField(help_text='Vehicle tax expiry date')),
                ('has_tachograph', models.BooleanField(default=False, help_text='Vehicle has a tachograph')),
                ('ulez_compliant', models.BooleanField(default=False, help_text='Compliant with Ultra Low Emission Zone standards')),
                ('clean_air_zone_status', models.CharField(choices=[('compliant', 'Compliant'), ('non_compliant', 'Non-Compliant'), ('exempt', 'Exempt')], default='non_compliant', help_text='Clean Air Zone compliance status', max_length=15)),
                ('insurance_policy_number', models.CharField(blank=True, max_length=50)),
                ('insurance_expiry_date', models.DateField(blank=True, null=True)),
                ('fleet_number', models.CharField(blank=True, help_text='Internal fleet ID', max_length=20)),
                ('last_service_date', models.DateField(blank=True, null=True)),
                ('next_service_date', models.DateField(blank=True, null=True)),
                ('last_service_mileage', models.PositiveIntegerField(blank=True, null=True)),
                ('current_mileage', models.PositiveIntegerField(default=0)),
                ('service_interval_months', models.PositiveIntegerField(default=12)),
                ('service_interval_miles', models.PositiveIntegerField(default=12000)),
                ('has_tail_lift', models.BooleanField(default=False)),
                ('has_refrigeration', models.BooleanField(default=False)),
                ('has_tracking_device', models.BooleanField(default=False)),
                ('has_dash_cam', models.BooleanField(default=False)),
                ('additional_features', models.JSONField(blank=True, help_text='Additional vehicle features', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Vehicle is currently active in the fleet')),
                ('location', models.JSONField(blank=True, help_text='Last known location', null=True)),
                ('last_location_update', models.DateTimeField(blank=True, null=True)),
                ('is_available', models.BooleanField(default=True, help_text='Vehicle is available for jobs')),
                ('primary_driver', models.ForeignKey(blank=True, help_text='Driver primarily assigned to this vehicle', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_vehicles', to='Driver.driver')),
                ('provider', models.ForeignKey(help_text='Service provider that owns this vehicle', on_delete=django.db.models.deletion.CASCADE, related_name='provider_vehicles', to='Provider.serviceprovider')),
            ],
            options={
                'verbose_name': 'Vehicle',
                'verbose_name_plural': 'Vehicles',
                'db_table': 'vehicle',
                'ordering': ['provider', 'fleet_number', 'registration'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MaintenanceRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('maintenance_type', models.CharField(choices=[('regular_service', 'Regular Service'), ('interim_service', 'Interim Service'), ('major_service', 'Major Service'), ('repair', 'Repair Work'), ('breakdown', 'Breakdown Repair'), ('recall', 'Manufacturer Recall'), ('tire_change', 'Tire Change'), ('battery', 'Battery Replacement'), ('other', 'Other Maintenance')], max_length=20)),
                ('maintenance_date', models.DateField()),
                ('mileage', models.PositiveIntegerField(help_text='Vehicle mileage at time of maintenance')),
                ('work_performed', models.TextField(help_text='Description of work performed')),
                ('parts_replaced', models.TextField(blank=True, help_text='Parts that were replaced')),
                ('performed_by', models.CharField(help_text='Person or garage that performed the work', max_length=100)),
                ('cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('invoice_reference', models.CharField(blank=True, max_length=100)),
                ('next_maintenance_date', models.DateField(blank=True, null=True)),
                ('next_maintenance_mileage', models.PositiveIntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_records', to='Vehicle.vehicle')),
            ],
            options={
                'verbose_name': 'Maintenance Record',
                'verbose_name_plural': 'Maintenance Records',
                'db_table': 'maintenance_record',
                'ordering': ['-maintenance_date'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='VehicleDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('document_type', models.CharField(choices=[('mot', 'MOT Certificate'), ('insurance', 'Insurance Certificate'), ('v5c', 'V5C Registration Document'), ('service', 'Service Record'), ('repair', 'Repair Invoice'), ('inspection', 'Vehicle Inspection Report'), ('other', 'Other Document')], max_length=20)),
                ('document_file', models.FileField(upload_to='vehicle_documents/%Y/%m/')),
                ('issue_date', models.DateField()),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('reference_number', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='Vehicle.vehicle')),
            ],
            options={
                'verbose_name': 'Vehicle Document',
                'verbose_name_plural': 'Vehicle Documents',
                'db_table': 'vehicle_document',
                'ordering': ['-issue_date'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='VehicleInspection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('inspection_type', models.CharField(choices=[('daily', 'Daily Check'), ('weekly', 'Weekly Check'), ('periodic', 'Periodic Safety Inspection'), ('pre_mot', 'Pre-MOT Inspection'), ('accident', 'Post-Accident Inspection')], max_length=20)),
                ('inspection_date', models.DateField()),
                ('inspector_name', models.CharField(max_length=100)),
                ('mileage_at_inspection', models.PositiveIntegerField()),
                ('overall_condition', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('unroadworthy', 'Unroadworthy')], max_length=20)),
                ('inspection_items', models.JSONField(help_text='Detailed inspection checklist items')),
                ('defects_found', models.TextField(blank=True, help_text='Description of any defects found')),
                ('actions_required', models.TextField(blank=True, help_text='Actions required to fix defects')),
                ('is_roadworthy', models.BooleanField(default=True, help_text='Vehicle is considered roadworthy')),
                ('notes', models.TextField(blank=True)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inspections', to='Vehicle.vehicle')),
            ],
            options={
                'verbose_name': 'Vehicle Inspection',
                'verbose_name_plural': 'Vehicle Inspections',
                'db_table': 'vehicle_inspection',
                'ordering': ['-inspection_date'],
                'managed': True,
            },
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['registration'], name='vehicle_registr_a8749d_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['provider'], name='vehicle_provide_4904c7_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['vehicle_type'], name='vehicle_vehicle_6825ae_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['is_active', 'is_available'], name='vehicle_is_acti_004929_idx'),
        ),
    ]

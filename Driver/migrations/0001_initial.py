# Generated by Django 5.2.1 on 2025-05-13 22:23

import django.contrib.gis.db.models.fields
import django.core.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(max_length=20)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('national_insurance_number', models.CharField(blank=True, help_text='National Insurance Number (e.g., AB123456C)', max_length=9, null=True, validators=[django.core.validators.RegexValidator('^[A-CEGHJ-PR-TW-Z]{1}[A-CEGHJ-NPR-TW-Z]{1}[0-9]{6}[A-D]{1}$', 'Valid NI number required')])),
                ('address', models.TextField(blank=True)),
                ('postcode', models.CharField(blank=True, max_length=10)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('last_location_update', models.DateTimeField(blank=True, null=True)),
                ('employment_type', models.CharField(choices=[('employee', 'Employee'), ('contractor', 'Self-employed Contractor'), ('agency', 'Agency Driver'), ('temporary', 'Temporary Worker')], default='employee', help_text='Type of employment relationship', max_length=20)),
                ('date_started', models.DateField(default=None, help_text='Date driver started with the company')),
                ('license_number', models.CharField(help_text='Driver license number', max_length=20, null=True)),
                ('license_country_of_issue', models.CharField(default='United Kingdom', help_text='Country where license was issued', max_length=50)),
                ('license_categories', models.JSONField(default=list, help_text="Categories on driver's license")),
                ('license_expiry_date', models.DateField(default=None, help_text='License expiry date')),
                ('digital_tachograph_card_number', models.CharField(blank=True, help_text='Digital tachograph card number', max_length=20)),
                ('tacho_card_expiry_date', models.DateField(blank=True, help_text='Tachograph card expiry date', null=True)),
                ('has_cpc', models.BooleanField(default=False, help_text='Driver has Certificate of Professional Competence')),
                ('cpc_expiry_date', models.DateField(blank=True, help_text='CPC qualification expiry date', null=True)),
                ('has_adr', models.BooleanField(default=False, help_text='Qualified for dangerous goods transport (ADR)')),
                ('adr_expiry_date', models.DateField(blank=True, help_text='ADR certification expiry date', null=True)),
                ('induction_completed', models.BooleanField(default=False)),
                ('induction_date', models.DateField(blank=True, null=True)),
                ('max_weekly_hours', models.PositiveIntegerField(default=48, help_text='Maximum weekly working hours')),
                ('opted_out_of_working_time_directive', models.BooleanField(default=False, help_text='Driver has opted out of 48-hour working week limit')),
                ('status', models.CharField(choices=[('available', 'Available'), ('on_job', 'On Job'), ('off_duty', 'Off Duty'), ('on_break', 'On Break'), ('unavailable', 'Unavailable'), ('suspended', 'Suspended'), ('inactive', 'Inactive')], default='available', help_text='Current driver status', max_length=20)),
                ('penalty_points', models.PositiveIntegerField(default=0, help_text='Number of penalty points on license', validators=[django.core.validators.MaxValueValidator(12)])),
                ('preferred_vehicle_types', models.JSONField(blank=True, help_text='Preferred vehicle types for this driver', null=True)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Driver',
                'verbose_name_plural': 'Drivers',
                'db_table': 'driver',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DriverAvailability',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField()),
                ('time_slots', models.JSONField()),
                ('max_jobs', models.IntegerField(default=1)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Driver Availability',
                'verbose_name_plural': 'Driver Availabilities',
                'db_table': 'driver_availability',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DriverDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('document_type', models.CharField(choices=[('license', 'Driving License'), ('cpc', 'CPC Qualification Card'), ('tacho', 'Tachograph Card'), ('adr', 'ADR Certificate'), ('insurance', 'Insurance Document'), ('training', 'Training Certificate'), ('employment', 'Employment Contract'), ('id', 'ID Document'), ('medical', 'Medical Certificate'), ('other', 'Other Document')], max_length=20)),
                ('document_file', models.FileField(upload_to='driver_documents/%Y/%m/')),
                ('issue_date', models.DateField()),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('reference_number', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Driver Document',
                'verbose_name_plural': 'Driver Documents',
                'db_table': 'driver_document',
                'ordering': ['-issue_date'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DriverInfringement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('infringement_type', models.CharField(choices=[('drivers_hours', 'Drivers Hours Violation'), ('speeding', 'Speeding'), ('maintenance', 'Vehicle Maintenance Negligence'), ('documentation', 'Missing Documentation'), ('procedure', 'Procedure Violation'), ('accident', 'Accident'), ('other', 'Other Infringement')], max_length=20)),
                ('infringement_date', models.DateField()),
                ('description', models.TextField()),
                ('penalty_points_added', models.PositiveIntegerField(default=0)),
                ('fine_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('reported_by', models.CharField(max_length=100)),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolution_date', models.DateField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Driver Infringement',
                'verbose_name_plural': 'Driver Infringements',
                'db_table': 'driver_infringement',
                'ordering': ['-infringement_date'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DriverLocation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(geography=True, srid=4326)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('speed', models.FloatField(null=True)),
                ('heading', models.FloatField(null=True)),
                ('accuracy', models.FloatField(null=True)),
            ],
            options={
                'db_table': 'driver_location',
                'ordering': ['-timestamp'],
                'get_latest_by': 'timestamp',
                'managed': True,
            },
        ),
    ]
